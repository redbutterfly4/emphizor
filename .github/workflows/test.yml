name: Integration Tests

on:
  push:
    branches: [ main, develop, gui_work ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
    
    - name: Create test environment
      run: |
        echo "TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}" > test.env
        echo "TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}" >> test.env
        echo "TEST_USER_NAME=Test User" >> test.env
        echo "TEST_USER_2_EMAIL=${{ secrets.TEST_USER_2_EMAIL }}" >> test.env
        echo "TEST_USER_2_PASSWORD=${{ secrets.TEST_USER_2_PASSWORD }}" >> test.env
        echo "TEST_USER_2_NAME=Test User 2" >> test.env
    
    - name: Run integration tests (Mock)
      run: |
        # Run tests with mocked Supabase to avoid external dependencies
        xvfb-run -a python -m pytest tests/ -m "integration and not auth" -v --tb=short
    
    - name: Run database tests (Mock)
      run: |
        xvfb-run -a python -m pytest tests/ -m database -v --tb=short
    
    - name: Run GUI tests (Mock)
      run: |
        xvfb-run -a python -m pytest tests/ -m gui -v --tb=short
    
    - name: Run auth tests (if credentials available)
      if: env.TEST_USER_EMAIL != ''
      run: |
        xvfb-run -a python -m pytest tests/ -m auth -v --tb=short
      env:
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
    
    - name: Generate coverage report
      run: |
        xvfb-run -a python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-exclude=tests/*
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-python${{ matrix.python-version }}
        path: htmlcov/
    
    - name: Test summary
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Python version: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Platform: ubuntu-latest" >> $GITHUB_STEP_SUMMARY
        echo "- Status: Tests completed" >> $GITHUB_STEP_SUMMARY

  test-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
    
    - name: Create test environment
      run: |
        echo "TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}" > test.env
        echo "TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}" >> test.env
        echo "TEST_USER_NAME=Test User" >> test.env
        echo "TEST_USER_2_EMAIL=${{ secrets.TEST_USER_2_EMAIL }}" >> test.env
        echo "TEST_USER_2_PASSWORD=${{ secrets.TEST_USER_2_PASSWORD }}" >> test.env
        echo "TEST_USER_2_NAME=Test User 2" >> test.env
    
    - name: Run integration tests (Mock)
      run: |
        python -m pytest tests/ -m "integration and not auth" -v --tb=short
    
    - name: Run database tests (Mock)
      run: |
        python -m pytest tests/ -m database -v --tb=short

  test-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
    
    - name: Create test environment
      run: |
        echo "TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}" > test.env
        echo "TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}" >> test.env
        echo "TEST_USER_NAME=Test User" >> test.env
        echo "TEST_USER_2_EMAIL=${{ secrets.TEST_USER_2_EMAIL }}" >> test.env
        echo "TEST_USER_2_PASSWORD=${{ secrets.TEST_USER_2_PASSWORD }}" >> test.env
        echo "TEST_USER_2_NAME=Test User 2" >> test.env
    
    - name: Run integration tests (Mock)
      run: |
        python -m pytest tests/ -m "integration and not auth" -v --tb=short
    
    - name: Run database tests (Mock)
      run: |
        python -m pytest tests/ -m database -v --tb=short 